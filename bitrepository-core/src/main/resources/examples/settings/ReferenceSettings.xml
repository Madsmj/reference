<?xml version="1.0" encoding="utf-8"?>
<!--
  #%L
  Bitrepository Core
  %%
  Copyright (C) 2010 - 2012 The State and University Library, The Royal Library and The State Archives, Denmark
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as 
  published by the Free Software Foundation, either version 2.1 of the 
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Lesser Public License for more details.
  
  You should have received a copy of the GNU General Lesser Public 
  License along with this program.  If not, see
  <http://www.gnu.org/licenses/lgpl-2.1.html>.
  #L%
  -->

<ReferenceSettings xmlns="http://bitrepository.org/settings/ReferenceSettings.xsd">
  <GeneralSettings>
    <!--  
      Defines the class that the different clients uses to construct their private destination.
      The setting is optional, and if left out defaults to DefaultReceiverDestinationIDFactory. 
      Currently the following classes are available:
      - DefaultReceiverDestinationIDFactory (The default)
      - UserSpecificReceiverDestinationIDFactory
    -->   
    <ReceiverDestinationIDFactoryClass>org.bitrepository.protocol.messagebus.destination.DefaultReceiverDestinationIDFactory</ReceiverDestinationIDFactoryClass>
  </GeneralSettings>

  <ClientSettings>
    <!-- 
      The interval at which conversations are cleaned up. 
      Unit in milliseconds.       
    -->
    <MediatorCleanupInterval>1000</MediatorCleanupInterval>

    <!-- 
      The maximum amount of time a whole conversation may take. 
      This has some relation to Timeouts in CollectionSettings under ClientSettings. As such
      when writing the configuration, the values there should be taken into consideration. 
    -->
    <ConversationTimeout>3600000</ConversationTimeout>
  </ClientSettings>

  <!-- 
    Settings for the Reference and Checksum pillars. 
  -->
  <PillarSettings> 
    <!-- 
      ID of the pillar 
    -->
    <PillarID>test-pillar</PillarID>

    <!-- 
      Path to the base directory for file storage and checksum files (for the checksumpillar)
    -->
    <FileDir>test-archive</FileDir>

    <!--
      The minimum amounts of bytes available on storage prior to accepting a PutFileRequest. 
    -->    
    <MinimumSizeLeft>1000000000</MinimumSizeLeft>

    <!-- 
      Time estimate for how long it will take the pillar to start the delivery of a file
      when requested. 
      Time in milliseconds. 
    -->
    <TimeToStartDeliver>1000</TimeToStartDeliver>
    
    <!--
      The number of milliseconds for a checksum to become outdated in the ChecksumStore.
      This is not used by the ChecksumPillar, since it anyway would not be able to 
      recalculate the checksum. 
     -->
    <MaxAgeForChecksums>3600000</MaxAgeForChecksums>

    <!-- 
      Database specification object for the data about the AuditTrailContributer database.
    -->
    <AuditTrailContributerDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:auditcontributerdb</DatabaseURL>
    </AuditTrailContributerDatabase>

    <!-- 
      Database specification object for the data about the ChecksumDatabase.
    -->
    <ChecksumDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:checksumdb</DatabaseURL>
    </ChecksumDatabase>
    
    <!-- 
      Setting of how severe alarms needs to be before they are sent. 
      Available levels:
        - EMERGENCY - will only send an Alarm for the severest protocol issues (e.g. invalid message 
        or certificate).
        - ERROR - sends an Alarm in the case of checksum errors or if a request does not uphold the 
        contract in CollectionSettings (e.g. does not contain the required checksums).
        - WARNING - Sends an Alarm whenever an operation or identification fails (e.g. missing file, 
        file already exist, etc.)
    -->
    <AlarmLevel>ERROR</AlarmLevel>
    
    <!--
      Settings for whether the ChecksumPillar should download the file regarding the PutFile operation,
      or it should only use the checksum given for validation.
      It has the following values:
      - ALWAYS - the ChecksumPillar must always download the file during the PutFile operation, and then
      calculate the checksum of that file.
      - NEVER - the ChecksumPillar must never download the file. It must only use the checksum given
      in the ChecksumForNewFile element.
      - DOWNLOAD_WHEN_MISSING_FROM_MESSAGE - if the ChecksumForNewFile element is within the PutFileRequest 
      then the ChecksumPillar must use the checksum. If the element is missing from the message, then 
      then file must be downloaded for calculating the checksum.
     -->
    <ChecksumPillarFileDownload>DOWNLOAD_WHEN_MISSING_FROM_MESSAGE</ChecksumPillarFileDownload>
  </PillarSettings>

  <!-- 
    Settings for the DeleteFileClient
    Currently this section is empty
  -->
  <DeleteFileSettings></DeleteFileSettings>

  <!-- 
    Settings for the GetAuditTrailsClient
    Currently this section is empty
  -->
  <GetAuditTrailSettings></GetAuditTrailSettings>

  <!-- 
    Settings for the GetChecksumsFileClient
    Currently this section is empty
  -->
  <GetChecksumsSettings></GetChecksumsSettings>

  <!-- 
    Settings for the GetFileClient
    Currently this section is empty
  -->
  <GetFileSettings></GetFileSettings>

  <!-- 
    Settings for the GetFileIDsClient
    Currently this section is empty
  -->
  <GetFileIDsSettings></GetFileIDsSettings>

  <!-- 
    Settings for the GetStatusClient
    Currently this section is empty
  -->
  <GetStatusSettings></GetStatusSettings>

  <!-- 
    Settings for the PutFileClient
  -->
  <PutFileSettings>
    <!--
    Should the putClient attempt to put files to the pillars, even if only a subset of the pillars
    are available. Note this will break integrity, but will make the storage of files possible when pillars
    are unavailable for puts.
    -->
    <PartialPutsAllow>true</PartialPutsAllow  >
  </PutFileSettings>

  <!-- 
    Settings for the ReplaceFileClient
    Currently this section is empty
  -->
  <ReplaceFileSettings></ReplaceFileSettings>

  <!-- Settings for the AlarmService -->
  <AlarmServiceSettings>
    <!-- ID of the service -->
    <ID>alarm-service</ID>

    <!--  
      Configuration for sending mails upon reception an alarm. 
      The element is optional, if missing alarm notifications won't be sent by mail. 
    -->
    <MailingConfiguration> 
      <!-- Recepient of the alarm notification mails -->
      <MailReceiver>foo@example.com</MailReceiver> 
      <!-- The sender of the alarm notification mails -->
      <MailSender>foo@example.com</MailSender> 
      <!-- Address for the (smtp) mailserver for sending mails -->
      <MailServer>mail.server.com</MailServer> 
    </MailingConfiguration>

    <!-- 
      Database specification object for the AlarmService database for persisting alarms .
    -->
    <AlarmServiceDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:alarmservicedb</DatabaseURL>
    </AlarmServiceDatabase>
  </AlarmServiceSettings>

  <!-- Settings for the AuditTrailService -->
  <AuditTrailServiceSettings>
    <!-- ID of the service -->
    <ID>audittrail-service</ID>
    <!-- Setting to determine if a missing/non-responding contributor is an alarm situation -->
    <SendAlarmOnMissingContributer>false</SendAlarmOnMissingContributer>

    <!-- 
      Database specification object for the AuditTrailService for persisting AuditTrails.
    -->
    <AuditTrailServiceDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:auditservicedb</DatabaseURL>
    </AuditTrailServiceDatabase>

    <!-- 
      Defines the interval at which AuditTrails should be collected.
      Timeunit in milliseconds. 
    --> 
    <CollectAuditInterval>3600000</CollectAuditInterval> 

    <!-- 
      Interval at which to check if its time to collect audit trails
      Timeunit in milliseconds
    -->
    <TimerTaskCheckInterval>2000</TimerTaskCheckInterval>
    
    <!-- 
      The interval at which collected AuditTrails are backedup / preserved. 
      Timeunit in milliseconds
    -->
    <AuditTrailPreservationInterval>604800000</AuditTrailPreservationInterval>

    <!-- 
      Directory for temporary storage of AuditTrails for preservation.
    -->
    <AuditTrailPreservationTemporaryDirectory>/tmp/</AuditTrailPreservationTemporaryDirectory>
  </AuditTrailServiceSettings>

  <!-- Settings for the IntegrityService -->
  <IntegrityServiceSettings>
    <!-- ID of the service -->
    <ID>integrity-service</ID>

    <!-- 
      Interval between checksums consistency check. 
      Timeunit in milliseconds
     -->
    <SchedulerInterval>2000</SchedulerInterval>

    <!-- 
      Database specification object for the cache of integrity service database.
    -->
    <IntegrityDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:integritydb</DatabaseURL>
    </IntegrityDatabase>

    <!-- 
      Interval between fileIDs consistency check.
      Timeunit in milliseconds.    
    -->
    <TimeBeforeMissingFileCheck>3600000</TimeBeforeMissingFileCheck> 
    
    <!-- 
      The maximum number of results per conversation for updating either the fileids 
      or the checksums. 
     -->
    <MaximumNumberOfResultsPerConversation>10000</MaximumNumberOfResultsPerConversation>
    
    <!-- 
      Database specification object for the Integrity service's audit trail information.
    -->
    <AuditTrailContributerDatabase>
    
      <!-- 
        The classpath for the driver for the database.  
        -->
      <DriverClass>org.apache.derby.jdbc.EmbeddedDriver</DriverClass>
      
      <!--
        The URL for the database. 
        -->
      <DatabaseURL>jdbc:derby:auditcontributerdb</DatabaseURL>
    </AuditTrailContributerDatabase>
  </IntegrityServiceSettings>

  <!-- Settings for the Monitoring / Status service -->
  <MonitoringServiceSettings>
    <!-- ID for the service -->
    <ID>monitoring-service</ID>
    <!-- 
      Interval at which status is requested. 
      Timeunit in milliseconds.
    -->
    <CollectionInterval>60000</CollectionInterval> <!-- 1 minute -->
    <!-- 
      The maximum number of times a component may fail to respond before 
      it being marked as unresponsive 
    -->    
    <MaxRetries>3</MaxRetries>
  </MonitoringServiceSettings>
  
  <!-- Settings for the file exchange. -->
  <FileExchangeSettings>
    <!-- The type of protocol -->
    <ProtocolType>HTTP</ProtocolType>
    <!-- The name of the server -->
    <ServerName>sandkasse-01.kb.dk</ServerName>
    <!-- The port number -->
    <Port>80</Port>
    <!-- The path on the server. -->
    <Path>/dav</Path>
  </FileExchangeSettings>
</ReferenceSettings>
